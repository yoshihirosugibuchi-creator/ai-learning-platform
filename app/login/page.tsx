'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Brain, Mail, Lock, User, ArrowRight, Sparkles } from 'lucide-react'
import { useAuth } from '@/components/auth/AuthProvider'
import { logAuthDebugInfo, debugLoginAttempt, setupGlobalErrorHandling } from '@/lib/debug-auth'
import type { AuthError } from '@supabase/supabase-js'

export default function LoginPage() {
  const router = useRouter()
  const { signIn, signUp } = useAuth()
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState('')
  const [success, setSuccess] = useState('')

  // Setup debugging on component mount
  useEffect(() => {
    if (typeof window !== 'undefined') {
      setupGlobalErrorHandling()
      logAuthDebugInfo()
    }
  }, [])

  // „É≠„Ç∞„Ç§„É≥„Éï„Ç©„Éº„É†Áä∂ÊÖã
  const [loginForm, setLoginForm] = useState({
    email: '',
    password: ''
  })

  // Êñ∞Ë¶èÁôªÈå≤„Éï„Ç©„Éº„É†Áä∂ÊÖã
  const [registerForm, setRegisterForm] = useState({
    name: '',
    email: '',
    password: '',
    confirmPassword: ''
  })

  // Supabase„É≠„Ç∞„Ç§„É≥„Ç®„É©„Éº„ÇíÊó•Êú¨Ë™û„É°„ÉÉ„Çª„Éº„Ç∏„Å´Â§âÊèõ
  const translateAuthError = (error: { message?: string }): string => {
    if (!error?.message) return '„É≠„Ç∞„Ç§„É≥„Å´Â§±Êïó„Åó„Åæ„Åó„Åü'
    
    const message = error.message.toLowerCase()
    
    // „Çà„Åè„ÅÇ„ÇãSupabase„ÅÆ„Ç®„É©„Éº„Éë„Çø„Éº„É≥„Çí„ÉÅ„Çß„ÉÉ„ÇØ
    if (message.includes('invalid login credentials') || 
        message.includes('invalid credentials') ||
        message.includes('email not confirmed') ||
        message.includes('invalid email or password')) {
      return '„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„Åæ„Åü„ÅØ„Éë„Çπ„ÉØ„Éº„Éâ„ÅåÊ≠£„Åó„Åè„ÅÇ„Çä„Åæ„Åõ„Çì'
    }
    
    if (message.includes('email not confirmed')) {
      return '„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÅÆÁ¢∫Ë™ç„ÅåÂÆå‰∫Ü„Åó„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇÁ¢∫Ë™ç„É°„Éº„É´„Çí„ÅîÁ¢∫Ë™ç„Åè„Å†„Åï„ÅÑ'
    }
    
    if (message.includes('too many requests')) {
      return '„É≠„Ç∞„Ç§„É≥Ë©¶Ë°åÂõûÊï∞„Åå‰∏äÈôê„Å´ÈÅî„Åó„Åæ„Åó„Åü„ÄÇ„Åó„Å∞„Çâ„Åè„Åó„Å¶„Åã„ÇâÂÜçÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ'
    }
    
    if (message.includes('network') || message.includes('fetch')) {
      return '„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇÊé•Á∂ö„ÇíÁ¢∫Ë™ç„Åó„Å¶ÂÜçÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ'
    }
    
    // „Åù„ÅÆ‰ªñ„ÅÆ„Ç®„É©„Éº„ÅØ‰∏ÄËà¨ÁöÑ„Å™„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫
    return '„É≠„Ç∞„Ç§„É≥„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇÂÖ•ÂäõÂÜÖÂÆπ„Çí„ÅîÁ¢∫Ë™ç„Åè„Å†„Åï„ÅÑ'
  }

  // SupabaseÁôªÈå≤„Ç®„É©„Éº„ÇíÊó•Êú¨Ë™û„É°„ÉÉ„Çª„Éº„Ç∏„Å´Â§âÊèõ
  const translateRegistrationError = (error: { message?: string }): string => {
    if (!error?.message) return 'ÁôªÈå≤‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü'
    
    const message = error.message.toLowerCase()
    
    if (message.includes('already registered') || 
        message.includes('user already registered')) {
      return '„Åì„ÅÆ„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÅØÊó¢„Å´ÁôªÈå≤„Åï„Çå„Å¶„ÅÑ„Åæ„Åô'
    }
    
    if (message.includes('invalid email')) {
      return '„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÅÆÂΩ¢Âºè„ÅåÊ≠£„Åó„Åè„ÅÇ„Çä„Åæ„Åõ„Çì'
    }
    
    if (message.includes('password')) {
      if (message.includes('weak') || message.includes('short')) {
        return '„Éë„Çπ„ÉØ„Éº„Éâ„ÅåÂº±„Åô„Åé„Åæ„Åô„ÄÇ„Çà„ÇäÂº∑Âäõ„Å™„Éë„Çπ„ÉØ„Éº„Éâ„ÇíË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ'
      }
      return '„Éë„Çπ„ÉØ„Éº„Éâ„ÅÆÂΩ¢Âºè„ÅåÊ≠£„Åó„Åè„ÅÇ„Çä„Åæ„Åõ„Çì'
    }
    
    if (message.includes('too many requests')) {
      return 'ÁôªÈå≤Ë©¶Ë°åÂõûÊï∞„Åå‰∏äÈôê„Å´ÈÅî„Åó„Åæ„Åó„Åü„ÄÇ„Åó„Å∞„Çâ„Åè„Åó„Å¶„Åã„ÇâÂÜçÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ'
    }
    
    if (message.includes('network') || message.includes('fetch')) {
      return '„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇÊé•Á∂ö„ÇíÁ¢∫Ë™ç„Åó„Å¶ÂÜçÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ'
    }
    
    // „Åù„ÅÆ‰ªñ„ÅÆ„Ç®„É©„Éº„ÅØ‰∏ÄËà¨ÁöÑ„Å™„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫
    return 'ÁôªÈå≤‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇÂÖ•ÂäõÂÜÖÂÆπ„Çí„ÅîÁ¢∫Ë™ç„Åè„Å†„Åï„ÅÑ'
  }

  // „É≠„Ç∞„Ç§„É≥Âá¶ÁêÜ
  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault()
    console.log('üöÄ Login form submitted')
    setIsLoading(true)
    setError('')
    
    // Create a timeout for the entire login process
    const loginTimeout = setTimeout(() => {
      setIsLoading(false)
      setError('„É≠„Ç∞„Ç§„É≥Âá¶ÁêÜ„Åå„Çø„Ç§„É†„Ç¢„Ç¶„Éà„Åó„Åæ„Åó„Åü„ÄÇÂÜçÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ')
      console.error('‚ùå Login process timeout')
    }, 20000) // 20Áßí„Çø„Ç§„É†„Ç¢„Ç¶„Éà
    
    try {
      console.log('üìù Calling signIn with:', loginForm.email)
      debugLoginAttempt(loginForm.email)
      const { error } = await signIn(loginForm.email, loginForm.password)
      
      // Clear timeout if we get here
      clearTimeout(loginTimeout)
      
      if (error) {
        // „É¶„Éº„Ç∂„ÉºÂÖ•Âäõ„Ç®„É©„Éº„ÅØÈùô„Åã„Å´Âá¶ÁêÜÔºàSupabase„Ç®„É©„Éº„Ç¢„Ç§„Ç≥„É≥ÂõûÈÅøÔºâ
        const errorMessage = (error as AuthError)?.message || ''
        if (errorMessage.includes('Invalid login credentials') || 
            errorMessage.includes('invalid credentials') ||
            errorMessage.includes('invalid email or password')) {
          console.debug('Login failed: Invalid credentials')
        } else {
          console.error('‚ùå Login error:', error)
        }
        const userFriendlyMessage = translateAuthError(error)
        setError(userFriendlyMessage)
      } else {
        console.log('‚úÖ Login successful, redirecting to home')
        router.push('/')
      }
    } catch (err) {
      clearTimeout(loginTimeout)
      console.error('‚ùå Login exception:', err)
      setError('„É≠„Ç∞„Ç§„É≥‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü')
    } finally {
      setIsLoading(false)
      console.log('üèÅ Login process completed')
    }
  }

  // Êñ∞Ë¶èÁôªÈå≤Âá¶ÁêÜ
  const handleRegister = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)
    setError('')
    setSuccess('')

    // „Éê„É™„Éá„Éº„Ç∑„Éß„É≥
    if (registerForm.password !== registerForm.confirmPassword) {
      setError('„Éë„Çπ„ÉØ„Éº„Éâ„Åå‰∏ÄËá¥„Åó„Åæ„Åõ„Çì')
      setIsLoading(false)
      return
    }

    if (registerForm.password.length < 6) {
      setError('„Éë„Çπ„ÉØ„Éº„Éâ„ÅØ6ÊñáÂ≠ó‰ª•‰∏ä„ÅßÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ')
      setIsLoading(false)
      return
    }

    try {
      const { error } = await signUp(registerForm.email, registerForm.password)
      
      if (error) {
        const userFriendlyMessage = translateRegistrationError(error)
        setError(userFriendlyMessage)
      } else {
        setSuccess('Á¢∫Ë™ç„É°„Éº„É´„ÇíÈÄÅ‰ø°„Åó„Åæ„Åó„Åü„ÄÇ„É°„Éº„É´„Çí„ÉÅ„Çß„ÉÉ„ÇØ„Åó„Å¶„Ç¢„Ç´„Ç¶„É≥„Éà„ÇíÊúâÂäπÂåñ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ')
      }
    } catch (err) {
      console.error('Registration error:', err)
      setError('ÁôªÈå≤‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü')
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4">
      <Card className="w-full max-w-md">
        <CardHeader className="text-center">
          <div className="flex justify-center mb-4">
            <div className="relative">
              <Brain className="h-12 w-12 text-blue-600" />
              <Sparkles className="h-4 w-4 text-yellow-500 absolute -top-1 -right-1" />
            </div>
          </div>
          <CardTitle className="text-2xl font-bold text-gray-900">
            AIÂ≠¶Áøí„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†
          </CardTitle>
        </CardHeader>

        <CardContent>
          <Tabs defaultValue="login" className="w-full">
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="login">„É≠„Ç∞„Ç§„É≥</TabsTrigger>
              <TabsTrigger value="register">Êñ∞Ë¶èÁôªÈå≤</TabsTrigger>
            </TabsList>

            <TabsContent value="login" className="space-y-4">
              <form onSubmit={handleLogin} className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="email">„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ</Label>
                  <div className="relative">
                    <Mail className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                    <Input
                      id="email"
                      type="email"
                      placeholder="your@email.com"
                      className="pl-10"
                      value={loginForm.email}
                      onChange={(e) => setLoginForm({...loginForm, email: e.target.value})}
                      required
                    />
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="password">„Éë„Çπ„ÉØ„Éº„Éâ</Label>
                  <div className="relative">
                    <Lock className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                    <Input
                      id="password"
                      type="password"
                      placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                      className="pl-10"
                      value={loginForm.password}
                      onChange={(e) => setLoginForm({...loginForm, password: e.target.value})}
                      required
                    />
                  </div>
                </div>

                <Button type="submit" className="w-full" disabled={isLoading}>
                  {isLoading ? (
                    <span className="flex items-center">
                      Âá¶ÁêÜ‰∏≠...
                    </span>
                  ) : (
                    <span className="flex items-center">
                      „É≠„Ç∞„Ç§„É≥ <ArrowRight className="ml-2 h-4 w-4" />
                    </span>
                  )}
                </Button>
              </form>
            </TabsContent>

            <TabsContent value="register" className="space-y-4">
              <form onSubmit={handleRegister} className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="name">„ÅäÂêçÂâç</Label>
                  <div className="relative">
                    <User className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                    <Input
                      id="name"
                      type="text"
                      placeholder="Áî∞‰∏≠Â§™ÈÉé"
                      className="pl-10"
                      value={registerForm.name}
                      onChange={(e) => setRegisterForm({...registerForm, name: e.target.value})}
                      required
                    />
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="register-email">„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ</Label>
                  <div className="relative">
                    <Mail className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                    <Input
                      id="register-email"
                      type="email"
                      placeholder="your@email.com"
                      className="pl-10"
                      value={registerForm.email}
                      onChange={(e) => setRegisterForm({...registerForm, email: e.target.value})}
                      required
                    />
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="register-password">„Éë„Çπ„ÉØ„Éº„Éâ</Label>
                  <div className="relative">
                    <Lock className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                    <Input
                      id="register-password"
                      type="password"
                      placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                      className="pl-10"
                      value={registerForm.password}
                      onChange={(e) => setRegisterForm({...registerForm, password: e.target.value})}
                      required
                    />
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="confirm-password">„Éë„Çπ„ÉØ„Éº„ÉâÔºàÁ¢∫Ë™çÔºâ</Label>
                  <div className="relative">
                    <Lock className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                    <Input
                      id="confirm-password"
                      type="password"
                      placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                      className="pl-10"
                      value={registerForm.confirmPassword}
                      onChange={(e) => setRegisterForm({...registerForm, confirmPassword: e.target.value})}
                      required
                    />
                  </div>
                </div>

                <Button type="submit" className="w-full" disabled={isLoading}>
                  {isLoading ? (
                    <span className="flex items-center">
                      Âá¶ÁêÜ‰∏≠...
                    </span>
                  ) : (
                    <span className="flex items-center">
                      Êñ∞Ë¶èÁôªÈå≤ <ArrowRight className="ml-2 h-4 w-4" />
                    </span>
                  )}
                </Button>
              </form>
            </TabsContent>
          </Tabs>

          {error && (
            <Alert className="mt-4" variant="destructive">
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}

          {success && (
            <Alert className="mt-4">
              <AlertDescription>{success}</AlertDescription>
            </Alert>
          )}
        </CardContent>
      </Card>
    </div>
  )
}