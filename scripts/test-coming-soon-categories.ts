#!/usr/bin/env tsx

import { createClient } from '@supabase/supabase-js'
import { config } from 'dotenv'
import path from 'path'

// Áí∞Â¢ÉÂ§âÊï∞Ë™≠„ÅøËæº„Åø
config({ path: path.join(process.cwd(), '.env.local') })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
const supabase = createClient(supabaseUrl, supabaseKey)

async function testComingSoonCategories() {
  console.log('üîç Coming Soon„Ç´„ÉÜ„Ç¥„É™„ÉºË°®Á§∫„ÉÜ„Çπ„ÉàÈñãÂßã...\n')

  try {
    // 1. „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å™„Ç´„ÉÜ„Ç¥„É™„Éº„ÇíÂèñÂæó
    console.log('üìä **1. „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Ç´„ÉÜ„Ç¥„É™„ÉºÂèñÂæó**')
    console.log('='.repeat(50))

    const { data: activeCategories, error: activeError } = await supabase
      .from('categories')
      .select('id, name, icon, is_active, type')
      .eq('is_visible', true)
      .eq('is_active', true)
      .order('type')
      .order('display_order')

    if (activeError) {
      throw activeError
    }

    console.log(`‚úÖ „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Ç´„ÉÜ„Ç¥„É™„Éº: ${activeCategories.length}‰ª∂`)
    activeCategories.forEach(cat => {
      console.log(`  - ${cat.icon} ${cat.name} (${cat.type})`)
    })

    // 2. Èùû„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å™„Ç´„ÉÜ„Ç¥„É™„Éº„ÇíÂèñÂæó
    console.log('\nüìä **2. Èùû„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Ç´„ÉÜ„Ç¥„É™„ÉºÂèñÂæó**')
    console.log('='.repeat(50))

    const { data: inactiveCategories, error: inactiveError } = await supabase
      .from('categories')
      .select('id, name, icon, description, is_active, type')
      .eq('is_visible', true)
      .eq('is_active', false)
      .order('type')
      .order('display_order')

    if (inactiveError) {
      throw inactiveError
    }

    console.log(`üîú Èùû„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Ç´„ÉÜ„Ç¥„É™„Éº: ${inactiveCategories.length}‰ª∂`)
    inactiveCategories.forEach(cat => {
      console.log(`  - ${cat.icon} ${cat.name} (${cat.type})`)
      if (cat.description) {
        console.log(`    Ë™¨Êòé: ${cat.description}`)
      }
    })

    // 3. „Ç´„ÉÜ„Ç¥„É™„Éº„Çø„Ç§„ÉóÂà•ÈõÜË®à
    console.log('\nüìä **3. „Ç´„ÉÜ„Ç¥„É™„Éº„Çø„Ç§„ÉóÂà•ÈõÜË®à**')
    console.log('='.repeat(50))

    const allCategories = [...activeCategories, ...inactiveCategories]
    const byType = allCategories.reduce((acc, cat) => {
      if (!acc[cat.type]) {
        acc[cat.type] = { active: 0, inactive: 0, total: 0 }
      }
      if (cat.is_active) {
        acc[cat.type].active++
      } else {
        acc[cat.type].inactive++
      }
      acc[cat.type].total++
      return acc
    }, {} as Record<string, { active: number, inactive: number, total: number }>)

    Object.entries(byType).forEach(([type, stats]) => {
      console.log(`${type}: Á∑èË®à${stats.total}‰ª∂ („Ç¢„ÇØ„ÉÜ„Ç£„Éñ: ${stats.active}, Èùû„Ç¢„ÇØ„ÉÜ„Ç£„Éñ: ${stats.inactive})`)
    })

    // 4. Coming SoonË°®Á§∫ÂÄôË£ú„ÅÆÁ¢∫Ë™ç
    console.log('\nüîú **4. Coming SoonË°®Á§∫ÂÄôË£ú**')
    console.log('='.repeat(50))

    if (inactiveCategories.length === 0) {
      console.log('‚ö†Ô∏è Coming SoonË°®Á§∫ÂØæË±°„ÅÆ„Ç´„ÉÜ„Ç¥„É™„Éº„Åå„ÅÇ„Çä„Åæ„Åõ„Çì')
    } else {
      console.log(`‚úÖ ${inactiveCategories.length}‰ª∂„ÅÆ„Ç´„ÉÜ„Ç¥„É™„Éº„ÅåComing SoonÂØæË±°`)
      console.log('„Åì„Çå„Çâ„ÅÆ„Ç´„ÉÜ„Ç¥„É™„Éº„ÅØ„ÇØ„Ç§„Ç∫„Éö„Éº„Ç∏„Åß„ÄåËøëÊó•ÂÖ¨Èñã‰∫àÂÆö„Äç„Å®„Åó„Å¶Ë°®Á§∫„Åï„Çå„Åæ„Åô:')
      inactiveCategories.forEach(cat => {
        console.log(`  üîú ${cat.icon} ${cat.name}`)
      })
    }

    // 5. Ê•≠Áïå„Ç´„ÉÜ„Ç¥„É™„Éº„ÅÆÁä∂Ê≥ÅÁ¢∫Ë™ç
    console.log('\nüè¢ **5. Ê•≠Áïå„Ç´„ÉÜ„Ç¥„É™„ÉºÁä∂Ê≥ÅÁ¢∫Ë™ç**')
    console.log('='.repeat(50))

    const industryCategories = allCategories.filter(cat => cat.type === 'industry')
    const activeIndustry = industryCategories.filter(cat => cat.is_active)
    const inactiveIndustry = industryCategories.filter(cat => !cat.is_active)

    console.log(`Ê•≠Áïå„Ç´„ÉÜ„Ç¥„É™„ÉºÁ∑èË®à: ${industryCategories.length}‰ª∂`)
    console.log(`  - „Ç¢„ÇØ„ÉÜ„Ç£„Éñ: ${activeIndustry.length}‰ª∂`)
    console.log(`  - Èùû„Ç¢„ÇØ„ÉÜ„Ç£„Éñ: ${inactiveIndustry.length}‰ª∂`)

    if (inactiveIndustry.length > 0) {
      console.log('\nÈùû„Ç¢„ÇØ„ÉÜ„Ç£„ÉñÊ•≠Áïå„Ç´„ÉÜ„Ç¥„É™„ÉºÔºàComing SoonÂØæË±°Ôºâ:')
      inactiveIndustry.forEach(cat => {
        console.log(`  üîú ${cat.icon} ${cat.name}`)
      })
    }

    console.log('\nüéâ **Coming Soon„Ç´„ÉÜ„Ç¥„É™„Éº„ÉÜ„Çπ„ÉàÂÆå‰∫ÜÔºÅ**')
    console.log('‚úÖ „ÇØ„Ç§„Ç∫„Éö„Éº„Ç∏„ÅßComing Soon„Çª„ÇØ„Ç∑„Éß„É≥„ÅåÊ≠£„Åó„ÅèË°®Á§∫„Åï„Çå„Çã„ÅØ„Åö„Åß„Åô')

  } catch (error) {
    console.error('‚ùå „ÉÜ„Çπ„Éà„Ç®„É©„Éº:', error)
    process.exit(1)
  }
}

testComingSoonCategories().then(() => {
  console.log('\nüîÑ Coming Soon„Ç´„ÉÜ„Ç¥„É™„Éº„ÉÜ„Çπ„ÉàÂÆå‰∫Ü')
  process.exit(0)
}).catch(error => {
  console.error('‚ùå Test error:', error)
  process.exit(1)
})