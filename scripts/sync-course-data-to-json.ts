#!/usr/bin/env tsx

import { createClient } from '@supabase/supabase-js'
import { config } from 'dotenv'
import { writeFileSync, readFileSync } from 'fs'
import path from 'path'

// Áí∞Â¢ÉÂ§âÊï∞Ë™≠„ÅøËæº„Åø
config({ path: path.join(process.cwd(), '.env.local') })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
const supabase = createClient(supabaseUrl, supabaseKey)

async function syncCourseDataToJSON() {
  console.log('üîÑ DB„Ç≥„Éº„Çπ„Éá„Éº„Çø„ÇíJSON„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„Å´ÂêåÊúüÈñãÂßã...\n')

  try {
    // 1. DB„Åã„Çâ„Ç≥„Éº„Çπ„Éá„Éº„Çø„ÇíÂèñÂæó
    console.log('üìä **1. DB„Åã„Çâ„Ç≥„Éº„Çπ„Éá„Éº„ÇøÂèñÂæó**')
    console.log('='.repeat(60))

    const { data: courses, error: coursesError } = await supabase
      .from('learning_courses')
      .select('*')
      .order('display_order')

    if (coursesError) {
      throw coursesError
    }

    if (!courses || courses.length === 0) {
      console.log('‚ö†Ô∏è DB„Å´„Ç≥„Éº„Çπ„Éá„Éº„Çø„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü')
      return
    }

    console.log(`‚úÖ ${courses.length}‰ª∂„ÅÆ„Ç≥„Éº„Çπ„ÇíÂèñÂæó`)

    // 2. JSON„Éï„Ç©„Éº„Éû„ÉÉ„Éà„Å´Â§âÊèõ
    console.log('\nüîÑ **2. JSON„Éï„Ç©„Éº„Éû„ÉÉ„Éà„Å´Â§âÊèõ**')
    console.log('='.repeat(60))

    const jsonCourses = courses.map(course => ({
      id: course.id,
      title: course.title,
      description: course.description,
      estimatedDays: course.estimated_days,
      difficulty: course.difficulty,
      icon: course.icon,
      color: course.color,
      displayOrder: course.display_order,
      genreCount: course.genre_count || 0,
      themeCount: course.theme_count || 0,
      status: course.status,
      badge: course.badge_data || {
        id: `badge_${course.id}`,
        title: `${course.title} ‰øÆ‰∫ÜË®º`,
        description: `${course.title}„ÅÆ„Çπ„Ç≠„É´„Çí‰øÆÂæó`,
        icon: "üèÜ",
        color: "#10B981",
        badgeImageUrl: `/badges/${course.id}.svg`,
        validityPeriodMonths: null
      }
    }))

    console.log('Â§âÊèõ„Åï„Çå„Åü„Ç≥„Éº„Çπ:')
    jsonCourses.forEach(course => {
      console.log(`  - ${course.title}: ${course.difficulty} (${course.status})`)
    })

    // 3. JSON„Éï„Ç°„Ç§„É´„ÇíÊõ¥Êñ∞
    console.log('\nüíæ **3. JSON„Éï„Ç°„Ç§„É´Êõ¥Êñ∞**')
    console.log('='.repeat(60))

    const jsonFilePath = path.join(process.cwd(), 'public', 'learning-data', 'courses.json')
    
    // „Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó‰ΩúÊàê
    const backupPath = path.join(process.cwd(), 'public', 'learning-data', 'courses.json.backup')
    try {
      const originalContent = readFileSync(jsonFilePath, 'utf8')
      writeFileSync(backupPath, originalContent)
      console.log(`üìã „Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó‰ΩúÊàê: ${backupPath}`)
    } catch (error) {
      console.warn('‚ö†Ô∏è „Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó‰ΩúÊàê„Å´Â§±Êïó:', error)
    }

    // Êñ∞„Åó„ÅÑJSON„Éá„Éº„Çø„Çí‰ΩúÊàê
    const newJsonContent = {
      // DBÂêåÊúüÊÉÖÂ†±„ÇíËøΩÂä†
      _meta: {
        syncedAt: new Date().toISOString(),
        syncedFrom: 'supabase_learning_courses',
        totalCourses: courses.length,
        note: '„Åì„ÅÆ„Éï„Ç°„Ç§„É´„ÅØDB„Åã„Çâ„ÅÆËá™ÂãïÂêåÊúü„Å´„Çà„ÇäÁîüÊàê„Åï„Çå„Å¶„ÅÑ„Åæ„Åô'
      },
      courses: jsonCourses
    }

    // JSON„Éï„Ç°„Ç§„É´„Å´Êõ∏„ÅçËæº„Åø
    writeFileSync(jsonFilePath, JSON.stringify(newJsonContent, null, 2))
    console.log(`‚úÖ JSON„Éï„Ç°„Ç§„É´Êõ¥Êñ∞ÂÆå‰∫Ü: ${jsonFilePath}`)

    // 4. ÂêåÊúüÁµêÊûú„Çµ„Éû„É™„Éº
    console.log('\nüìä **4. ÂêåÊúüÁµêÊûú„Çµ„Éû„É™„Éº**')
    console.log('='.repeat(60))
    console.log(`‚úÖ ÂêåÊúü„Åï„Çå„Åü„Ç≥„Éº„Çπ: ${jsonCourses.length}‰ª∂`)
    
    const skillLevelCount = jsonCourses.reduce((acc, course) => {
      acc[course.difficulty] = (acc[course.difficulty] || 0) + 1
      return acc
    }, {} as Record<string, number>)
    
    console.log('„Çπ„Ç≠„É´„É¨„Éô„É´Âà•:')
    Object.entries(skillLevelCount).forEach(([level, count]) => {
      console.log(`  - ${level}: ${count}‰ª∂`)
    })

    const statusCount = jsonCourses.reduce((acc, course) => {
      acc[course.status] = (acc[course.status] || 0) + 1
      return acc
    }, {} as Record<string, number>)
    
    console.log('„Çπ„ÉÜ„Éº„Çø„ÇπÂà•:')
    Object.entries(statusCount).forEach(([status, count]) => {
      console.log(`  - ${status}: ${count}‰ª∂`)
    })

    console.log(`‚úÖ ÂêåÊúüÊôÇÂàª: ${new Date().toISOString()}`)

    console.log('\nüéØ **JSON„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÂêåÊúüÂÆå‰∫ÜÔºÅ**')
    console.log('üí° JSON„Éï„Ç°„Ç§„É´„ÅåDB„Éá„Éº„Çø„Å®ÂêåÊúü„Åï„Çå„Åæ„Åó„Åü')

  } catch (error) {
    console.error('‚ùå ÂêåÊúü„Ç®„É©„Éº:', error)
    process.exit(1)
  }
}

syncCourseDataToJSON().then(() => {
  console.log('\nüîÑ „Ç≥„Éº„Çπ„Éá„Éº„ÇøÂêåÊúüÂÆå‰∫Ü')
  process.exit(0)
}).catch(error => {
  console.error('‚ùå Sync error:', error)
  process.exit(1)
})